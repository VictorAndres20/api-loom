import { Injectable } from '@nestjs/common';
import { BasicCrudService } from '../../../commons/services/crud.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Demand } from '../entity/demand.entity';
import { DemandDTO } from '../entity/demand.dto';
import { User } from 'src/api/users/entity/users.entity'
import { DemandState } from 'src/api/demand_state/entity/demand_state.entity'
import { ErrorDetail } from 'src/api/error_detail/entity/error_detail.entity'

@Injectable()
export class DemandService extends BasicCrudService<Demand, string, DemandDTO>{

    constructor(
        @InjectRepository(Demand)
        protected repo: Repository<Demand>,
    ) {super();}

    findById(id: string): Promise<Demand>{
        try{
            return this.findOne({where: {uuid:id}});
        } catch(err){
            throw new Error(err.message);
        }
    }

    buildBaseCreation(dto: DemandDTO): Demand{
        //Validations data
        if(! dto) throw new Error('DTO empty');

        //Assign data
        let entity = new Demand();
        entity.warp = dto.warp;
        entity.weft_quantity = dto.weft_quantity;
        entity.date_created = new Date();
        entity.date_closed = dto.date_closed;
        let usersc = new User();
        usersc.uuid = dto.user_create;
        entity.user_create = usersc;
        let users = new User();
        users.uuid = dto.user_close;
        entity.user_close = users;
        let demand_state = new DemandState();
        demand_state.cod = dto.demand_state;
        entity.demand_state = demand_state;
        let error_detail = new ErrorDetail();
        error_detail.cod = dto.error_detail;
        entity.error_detail = error_detail;
        entity.loom = dto.loom;
        return entity;
    }

    async dataValidationBeforeCreate(dto: DemandDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

    buildBaseEdition(entity: Demand, dto: DemandDTO): Demand{
        //Validations data
        if(! dto) throw new Error('DTO empty');
        if(! dto.uuid) throw new Error('Entity id null');

        //Assign data
        entity.warp = dto.warp ? dto.warp : entity.warp;
        entity.weft_quantity = dto.weft_quantity ? dto.weft_quantity : entity.weft_quantity;
        entity.date_created = dto.date_created ? dto.date_created : entity.date_created;
        entity.date_closed = dto.date_closed ? dto.date_closed : entity.date_closed;
        let usersc = new User();
        usersc.uuid = dto.user_create;
        entity.user_create = dto.user_create ? usersc : entity.user_create;
        let users = new User();
        users.uuid = dto.user_close;
        entity.user_close = dto.user_close ? users : entity.user_close;
        let demand_state = new DemandState();
        demand_state.cod = dto.demand_state;
        entity.demand_state = dto.demand_state ? demand_state : entity.demand_state;
        let error_detail = new ErrorDetail();
        error_detail.cod = dto.error_detail;
        entity.error_detail = dto.error_detail ? error_detail : entity.error_detail;
        entity.loom = dto.loom ? dto.loom : entity.loom;
        return entity;
    }

    async dataValidationBeforeEdit(dto: DemandDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */