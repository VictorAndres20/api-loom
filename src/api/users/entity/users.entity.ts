import { Entity, Column, PrimaryGeneratedColumn, PrimaryColumn, OneToMany, ManyToOne, JoinColumn } from 'typeorm';
import { UserType } from 'src/api/user_type/entity/user_type.entity'
import { Demand } from 'src/api/demand/entity/demand.entity'
import { Field, ObjectType } from '@nestjs/graphql';

@Entity({name:'users'})
@ObjectType()
export class User{

    @PrimaryGeneratedColumn()
    @Field()
    uuid: string;

    @Column()
    @Field()
    name: string;

    @Column()
    @Field()
    login: string;

    @Column()
    password: string;

    @Column()
    @Field()
    state: number;

    @ManyToOne(() => UserType, e => e.users, {
        onDelete: "CASCADE",
        eager: true,
    })
    @JoinColumn({ name: "type" })
    @Field(type => UserType)
    type: UserType;

    @OneToMany(() => Demand, e => e.user_create)
    demands_created: Demand[];

    @OneToMany(() => Demand, e => e.user_close)
    demands_closed: Demand[];

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */