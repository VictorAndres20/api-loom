import { Injectable } from '@nestjs/common';
import { BasicCrudService } from '../../../commons/services/crud.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../entity/users.entity';
import { UserDTO } from '../entity/users.dto';
import { UserType } from 'src/api/user_type/entity/user_type.entity'

@Injectable()
export class UserService extends BasicCrudService<User, string, UserDTO>{

    constructor(
        @InjectRepository(User)
        protected repo: Repository<User>,
    ) {super();}

    findById(id: string): Promise<User>{
        try{
            return this.findOne({where: {uuid:id}});
        } catch(err){
            throw new Error(err.message);
        }
    }

    buildBaseCreation(dto: UserDTO): User{
        //Validations data
        if(! dto) throw new Error('DTO empty');

        //Assign data
        let entity = new User();
        entity.name = dto.name;
        entity.login = dto.login;
        entity.password = dto.password;
        entity.state = dto.state;
        let user_type = new UserType();
        user_type.cod = dto.type;
        entity.type = user_type;
        return entity;
    }

    async dataValidationBeforeCreate(dto: UserDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

    buildBaseEdition(entity: User, dto: UserDTO): User{
        //Validations data
        if(! dto) throw new Error('DTO empty');
        if(! dto.uuid) throw new Error('Entity id null');

        //Assign data
        entity.name = dto.name ? dto.name : entity.name;
        entity.login = dto.login ? dto.login : entity.login;
        entity.password = dto.password ? dto.password : entity.password;
        entity.state = dto.state ? dto.state : entity.state;
        let user_type = new UserType();
        user_type.cod = dto.type;
        entity.type = dto.type ? user_type : entity.type;
        return entity;
    }

    async dataValidationBeforeEdit(dto: UserDTO): Promise<void> {
        // Input validations for null values that are required
        // For example validate if not exists for specific(s) properties
        // Example same login, same email, same cod, same nit
    }

}

/** Generated by https://github.com/VictorAndres20 code generator for database, NestJS, React */